{"version":3,"sources":["components/TextArea.js","components/Markdowned.js","components/test-markdown.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","handleChange","event","console","log","target","value","_this","props","react_default","a","createElement","className","name","id","cols","rows","this","onChange","bind","Component","Markdowned","react_markdown_default","source","input","text","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","val","state","setState","components_TextArea","components_Markdowned","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAiBeA,0NAbbC,aAAe,SAACC,GACfC,QAAQC,IAAIF,EAAMG,OAAOC,OAC3BC,EAAKC,MAAMP,aAAaC,EAAMG,OAAOC,gFAGlC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,YAAUE,KAAK,OAAOC,GAAG,WAAWC,KAAK,KAAKC,KAAK,KAAKV,MAAOW,KAAKT,MAAMF,MAAOY,SAAUD,KAAKhB,aAAakB,KAAKF,gBARnGG,+BCWRC,2LARX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACdH,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAeE,UAAU,+BAA+BW,OAAQN,KAAKT,MAAMgB,gBAJzDJ,cCHVK,EADF,mmBC+BEC,cAxBb,SAAAA,EAAYlB,GAAM,IAAAD,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAAV,KAAAS,IAChBnB,EAAAoB,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAd,KAAMT,KAMRP,aAAe,SAAC+B,GACd7B,QAAQC,IAAIG,EAAK0B,MAAMT,OACvBjB,EAAK2B,SAAS,CACZV,MAAOQ,KARTzB,EAAK0B,MAAQ,CACXT,MAAOC,GAHOlB,wEAehB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwB,EAAD,CAAU7B,MAAOW,KAAKgB,MAAMT,MAAOvB,aAAcgB,KAAKhB,eACtDQ,EAAAC,EAAAC,cAACyB,EAAD,CAAYZ,MAAOP,KAAKgB,MAAMT,gBAnBpBJ,oBCMEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fe4d9312.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './textarea.css';\r\n\r\nclass TextArea extends Component {\r\n  handleChange = (event) => {\r\n  \tconsole.log(event.target.value)\r\n\tthis.props.handleChange(event.target.value)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"textArea__component col-md-6 textarea\">\r\n        <textarea name=\"text\" id=\"textarea\" cols=\"85\" rows=\"25\" value={this.props.value} onChange={this.handleChange.bind(this)}></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextArea;\r\n","import React, { Component } from 'react';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport './markdowned.css';\r\n\r\nclass Markdowned extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"markdowned__component col-md-6 markdowned\">\r\n       <ReactMarkdown className=\"markdown text-left text-wrap\" source={this.props.input}></ReactMarkdown>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Markdowned;\r\n","const text = \"# Nishit Mehta \\n Changes are automatically rendered as you type. \\n * Uses react-markdown library  \\n * You can escape or skip the HTML, no `dangerouslySetInnerHTML` is used! Yay! \\n ## Code?\\n ```js \\n var React = require('react');\\nReact.render(\\n<Markdown source=\\\"# Your markdown here\\\" />,\\ndocument.getElementById('content')\\n);\\n ``` \\n## Tables?\\n| Feature   | Support |\\n| --------- | ------- |\\n| tables    | ✔ |\\n| alignment | ✔ |\\n| wewt      | ✔ |\\n Checkout my [GitHub](//github.com/nishitmehta1) profile \\n---------------\\nA project by [Nishit Mehta](https://nishitmehta.info/)\";\r\nexport default text;","import React, { Component } from 'react';\nimport './App.css';\nimport TextArea from './components/TextArea.js';\nimport Markdowned from './components/Markdowned.js';\nimport text from './components/test-markdown.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      input: text\n    }\n  }\n  \n  handleChange = (val) => {\n    console.log(this.state.input)\n    this.setState({\n      input: val\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TextArea value={this.state.input} handleChange={this.handleChange} />\n        <Markdowned input={this.state.input} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}